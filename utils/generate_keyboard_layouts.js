#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @ts-check

/**
 * @typedef { import('../packages/playwright-core/src/server/keyboards/types').KeyDefinition } KeyDefinition
 */

const fs = require('fs');
const assert = require('assert');
const path = require('path');
const xml2js = require('xml2js');
const md = require('./markdown');

// US keyboard
const defaultKlid = '00000409';

const copyrightHeader =
`/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated by ${path.basename(__filename).split(path.sep).join(path.posix.sep)}, do not edit manually.
`;

/**
 * @type { Object.<string, KeyDefinition | number> }
 *
 * numbers correspond to scancodes
 */
const keyboardLayoutGenerator = {
  // Functions row
  'Escape': { 'keyCode': 27, 'key': 'Escape' },
  'F1': { 'keyCode': 112, 'key': 'F1' },
  'F2': { 'keyCode': 113, 'key': 'F2' },
  'F3': { 'keyCode': 114, 'key': 'F3' },
  'F4': { 'keyCode': 115, 'key': 'F4' },
  'F5': { 'keyCode': 116, 'key': 'F5' },
  'F6': { 'keyCode': 117, 'key': 'F6' },
  'F7': { 'keyCode': 118, 'key': 'F7' },
  'F8': { 'keyCode': 119, 'key': 'F8' },
  'F9': { 'keyCode': 120, 'key': 'F9' },
  'F10': { 'keyCode': 121, 'key': 'F10' },
  'F11': { 'keyCode': 122, 'key': 'F11' },
  'F12': { 'keyCode': 123, 'key': 'F12' },

  // Numbers row
  'Backquote': 0x29,
  'Digit1': 0x02,
  'Digit2': 0x03,
  'Digit3': 0x04,
  'Digit4': 0x05,
  'Digit5': 0x06,
  'Digit6': 0x07,
  'Digit7': 0x08,
  'Digit8': 0x09,
  'Digit9': 0x0A,
  'Digit0': 0x0B,
  'Minus': 0x0C,
  'Equal': 0x0D,
  'Backspace': { 'keyCode': 8, 'key': 'Backspace' },

  // First row
  'Tab': { 'keyCode': 9, 'key': 'Tab' },
  'KeyQ': 0x10,
  'KeyW': 0x11,
  'KeyE': 0x12,
  'KeyR': 0x13,
  'KeyT': 0x14,
  'KeyY': 0x15,
  'KeyU': 0x16,
  'KeyI': 0x17,
  'KeyO': 0x18,
  'KeyP': 0x19,
  'BracketLeft': 0x1A,
  'BracketRight': 0x1B,
  'Enter': { 'keyCode': 13, 'key': 'Enter', 'text': '\r' },

  // Second row
  'CapsLock': { 'keyCode': 20, 'key': 'CapsLock' },
  'KeyA': 0x1E,
  'KeyS': 0x1F,
  'KeyD': 0x20,
  'KeyF': 0x21,
  'KeyG': 0x22,
  'KeyH': 0x23,
  'KeyJ': 0x24,
  'KeyK': 0x25,
  'KeyL': 0x26,
  'Semicolon': 0x27,
  'Quote': 0x28,
  'Backslash': 0x2B,

  // Third row
  'ShiftLeft': { 'keyCode': 160, 'keyCodeWithoutLocation': 16, 'key': 'Shift', 'location': 1 },
  'IntlBackslash': 0x56,
  'KeyZ': 0x2C,
  'KeyX': 0x2D,
  'KeyC': 0x2E,
  'KeyV': 0x2F,
  'KeyB': 0x30,
  'KeyN': 0x31,
  'KeyM': 0x32,
  'Comma': 0x33,
  'Period': 0x34,
  'Slash': 0x35,
  'ShiftRight': { 'keyCode': 161, 'keyCodeWithoutLocation': 16, 'key': 'Shift', 'location': 2 },

  // Last row
  'ControlLeft': { 'keyCode': 162, 'keyCodeWithoutLocation': 17, 'key': 'Control', 'location': 1 },
  'MetaLeft': { 'keyCode': 91, 'key': 'Meta', 'location': 1 },
  'AltLeft': { 'keyCode': 164, 'keyCodeWithoutLocation': 18, 'key': 'Alt', 'location': 1 },
  'Space': 0x39,
  'AltRight': { 'keyCode': 165, 'keyCodeWithoutLocation': 18, 'key': 'Alt', 'location': 2 },
  'AltGraph': { 'keyCode': 225, 'key': 'AltGraph' },
  'MetaRight': { 'keyCode': 92, 'key': 'Meta', 'location': 2 },
  'ContextMenu': { 'keyCode': 93, 'key': 'ContextMenu' },
  'ControlRight': { 'keyCode': 163, 'keyCodeWithoutLocation': 17, 'key': 'Control', 'location': 2 },

  // Center block
  'PrintScreen': { 'keyCode': 44, 'key': 'PrintScreen' },
  'ScrollLock': { 'keyCode': 145, 'key': 'ScrollLock' },
  'Pause': { 'keyCode': 19, 'key': 'Pause' },

  'PageUp': { 'keyCode': 33, 'key': 'PageUp' },
  'PageDown': { 'keyCode': 34, 'key': 'PageDown' },
  'Insert': { 'keyCode': 45, 'key': 'Insert' },
  'Delete': { 'keyCode': 46, 'key': 'Delete' },
  'Home': { 'keyCode': 36, 'key': 'Home' },
  'End': { 'keyCode': 35, 'key': 'End' },

  'ArrowLeft': { 'keyCode': 37, 'key': 'ArrowLeft' },
  'ArrowUp': { 'keyCode': 38, 'key': 'ArrowUp' },
  'ArrowRight': { 'keyCode': 39, 'key': 'ArrowRight' },
  'ArrowDown': { 'keyCode': 40, 'key': 'ArrowDown' },

  // Numpad
  'NumLock': { 'keyCode': 144, 'key': 'NumLock' },
  'NumpadDivide': { 'keyCode': 111, 'key': '/', 'location': 3 },
  'NumpadMultiply': { 'keyCode': 106, 'key': '*', 'location': 3 },
  'NumpadSubtract': { 'keyCode': 109, 'key': '-', 'location': 3 },
  'Numpad7': { 'keyCode': 36, 'shiftKeyCode': 103, 'key': 'Home', 'shiftKey': '7', 'location': 3 },
  'Numpad8': { 'keyCode': 38, 'shiftKeyCode': 104, 'key': 'ArrowUp', 'shiftKey': '8', 'location': 3 },
  'Numpad9': { 'keyCode': 33, 'shiftKeyCode': 105, 'key': 'PageUp', 'shiftKey': '9', 'location': 3 },
  'Numpad4': { 'keyCode': 37, 'shiftKeyCode': 100, 'key': 'ArrowLeft', 'shiftKey': '4', 'location': 3 },
  'Numpad5': { 'keyCode': 12, 'shiftKeyCode': 101, 'key': 'Clear', 'shiftKey': '5', 'location': 3 },
  'Numpad6': { 'keyCode': 39, 'shiftKeyCode': 102, 'key': 'ArrowRight', 'shiftKey': '6', 'location': 3 },
  'NumpadAdd': { 'keyCode': 107, 'key': '+', 'location': 3 },
  'Numpad1': { 'keyCode': 35, 'shiftKeyCode': 97, 'key': 'End', 'shiftKey': '1', 'location': 3 },
  'Numpad2': { 'keyCode': 40, 'shiftKeyCode': 98, 'key': 'ArrowDown', 'shiftKey': '2', 'location': 3 },
  'Numpad3': { 'keyCode': 34, 'shiftKeyCode': 99, 'key': 'PageDown', 'shiftKey': '3', 'location': 3 },
  'Numpad0': { 'keyCode': 45, 'shiftKeyCode': 96, 'key': 'Insert', 'shiftKey': '0', 'location': 3 },
  'NumpadDecimal': { 'keyCode': 46, 'shiftKeyCode': 110, 'key': '\u0000', 'shiftKey': '.', 'location': 3 },
  'NumpadEnter': { 'keyCode': 13, 'key': 'Enter', 'text': '\r', 'location': 3 },
};

/**
 * @param {string} xml
 * @returns {object}
 */
function parseXML(xml) {
  let result;
  xml2js.parseString(xml, {trim: true}, (err, r) => result = r);
  return result;
}

/**
 * @param { string } klid
 * @returns { Promise<Object.<string, KeyDefinition>> }
 */
async function generate(klid) {
  const [xml, kdbtables] = await Promise.all([
    fetch(`https://kbdlayout.info/${klid}/download/xml`).then(r => r.text()),
    fetch(`https://kbdlayout.info/${klid}/download/kbdtables`).then(r => r.text()),
  ]);

  const sc2vkJson = parseXML(xml);
  assert(sc2vkJson);

  /**
   * scancode to keys
   *
   * @type {Object.<string, { key: string, shiftKey: string }>}
   */
  const sc2keys = Object.fromEntries(sc2vkJson.KeyboardLayout.PhysicalKeys[0].PK
      .map(({ Result, $: { SC } }) => {
        if (!Result) return;

        let key, shiftKey;
        for (const { $, DeadKeyTable } of Result) {
          const { Text, With } = $ ?? {};
          if (With && With !== 'VK_SHIFT') continue;

          const text = Text ?? DeadKeyTable?.[0].$.Accent;
          const isShift = With === 'VK_SHIFT';
          if (!isShift) key = text;
          if (isShift) shiftKey = text;
        }
        return [SC.toUpperCase(), { key, shiftKey }];
      }).filter(Boolean));

  const kdbtablesJson = parseXML(kdbtables);
  assert(kdbtablesJson);

  const { VSCtoVK: [sc2vkCodeStr] }= kdbtablesJson.KbdDll.KbdLayerDescriptor[0].KbdLayer[0];

  /**
   * virtual key codes. array index corresponds to scancode, as number
   *
   * @type {number[]}
   */
  const sc2vkCode = sc2vkCodeStr.split(' ').map(hex => parseInt(hex, 16));

  /** @type { Object.<string, KeyDefinition> } */
  const layout = {};

  for (const [keyname, def] of Object.entries(keyboardLayoutGenerator)) {
    if (typeof def === 'number') {
      const sc = def.toString(16).toUpperCase().padStart(2, '0');
      const { key, shiftKey } = sc2keys[sc] ?? {};

      if (key === shiftKey === undefined) continue;

      // def is the scancode as number
      const keyCode = sc2vkCode[def];

      layout[keyname] = { key, keyCode, shiftKey: keyname === 'Space' && key === shiftKey ? undefined : shiftKey };
    } else {
      layout[keyname] = def;
    }
  }
  return layout;
}

/** @param {string | undefined} str */
function fixQuotes(str) {
  if (str === undefined || str === null) return;
  const [, strBody] = /^"(.*)"$/.exec(JSON.stringify(str)) ?? [];
  return strBody?.replace(/'/g, `\\'`).replace(/\\"/g, '"');
}

/** @param {KeyDefinition} def */
function stringifyKeyDefinition(def) {
  const escaped = {
    ...def,
    key: fixQuotes(def.key),
    shiftKey: fixQuotes(def.shiftKey),
    text: fixQuotes(def.text),
  };
  /** @type {string[]} */
  const propStrs = [];
  if (escaped.key !== undefined) propStrs.push(`key: '${escaped.key}'`);
  if (escaped.keyCode !== undefined) propStrs.push(`keyCode: ${escaped.keyCode}`);
  if (escaped.keyCodeWithoutLocation !== undefined) propStrs.push(`keyCodeWithoutLocation: ${escaped.keyCodeWithoutLocation}`);
  if (escaped.shiftKey !== undefined) propStrs.push(`shiftKey: '${escaped.shiftKey}'`);
  if (escaped.shiftKeyCode !== undefined) propStrs.push(`shiftKeyCode: ${escaped.shiftKeyCode}`);
  if (escaped.text !== undefined) propStrs.push(`text: '${escaped.text}'`);
  if (escaped.location !== undefined) propStrs.push(`location: ${escaped.location}`);

  return `{ ${propStrs.join(', ')} }`;
}

/**
 * @return {{ klid: string, layoutName: string, codes: string[],  }[]}
 */
function getKeyboardLayoutsFromMarkdown() {
  const params = md.parse(fs.readFileSync(paramsMarkdownFilename).toString());
  const mdKls = params.find(m => m.text === 'template-keyboard-layouts');
  assert(mdKls);
  // markdown table row:
  // | `<code-1>`, ..., `<code-n>` | [<name>](<url>) <!-- <klid> --> |
  return mdKls.children
      ?.map(m => m.text && /^\s*\|\s*`(.+)`\s*\|\s*\[(.+?)\]\(.*\)\s*<!--\s*([0-9A-F]+)\s*-->\s*\|\s*$/i.exec(m.text)?.slice(1))
      .filter(Boolean)
      // @ts-ignore
      .map(([codesStr, layoutName, klid]) => ({ klid, layoutName, codes: codesStr.split(/`\s*,\s*`/) })) ?? [];
}

const keyboardsDir = path.resolve(__dirname, '../packages/playwright-core/src/server/keyboards');
const paramsMarkdownFilename = path.resolve(__dirname, '../docs/src/api/params.md');

(async () => {;
  const layouts = getKeyboardLayoutsFromMarkdown();

  const klid2LayoutName = new Map(layouts.map(({ klid, layoutName }) => ([ klid, layoutName ])));

  for (const [klid, layoutName] of klid2LayoutName.entries()) {
    console.log(`Generating keyboard layout for ${layoutName} (KLID ${klid})`);
    const layout = await generate(klid);

    const layoutData = [
      copyrightHeader,
      `import type { KeyboardLayout } from '../types';`,
      ``,
      `// KLID ${klid} - ${layoutName}`,
      `const keyboardLayout: KeyboardLayout = {`,
      ...Object.entries(layout).map(([keyName, def]) => `  ${keyName}: ${stringifyKeyDefinition(def)},`),
      `};`,
      ``,
      `export default keyboardLayout;`,
      ``,
    ].join('\n');

    fs.writeFileSync(path.resolve(keyboardsDir, 'layouts', `${klid}.ts`), layoutData, 'utf-8');
  }

  const codesMapping = layouts
      .flatMap(({ klid, layoutName, codes }) => codes.map(code => `  ['${code.replace(/-/g, '_').toLowerCase()}', '${klid}'], // ${layoutName}`));

  const index = [
    copyrightHeader,
    `import defaultKeyboardLayoutObject from './layouts/${defaultKlid}';`,
    `import type { KeyboardLayout } from './types';`,
    ``,
    `export type * from './types';`,
    `export const defaultKlid = '${defaultKlid}';`,
    `export const defaultKeyboardLayout: KeyboardLayout = defaultKeyboardLayoutObject;`,
    ``,
    `export const localeMapping = new Map<string, string>([`,
    ...codesMapping,
    `]);`,
    ``,
    `export const keypadLocation = 3;`,
    ``,
  ].join('\n');

  fs.writeFileSync(path.resolve(keyboardsDir, 'index.ts'), index, 'utf-8');
})();
