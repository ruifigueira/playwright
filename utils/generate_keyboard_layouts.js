#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @ts-check

/**
 * @typedef { import("../packages/playwright-core/src/server/keyboards").KeyDefinition } KeyDefinition
 * @typedef { import("playwright").Locator } Locator
 * @typedef { import("playwright").Page } Page
 */

const fs = require('fs');
const assert = require('assert');
const path = require('path');
const { chromium } = require('playwright');

const layoutUrls = {
  he: { url: 'https://kbdlayout.info/KBDHE', name: 'Greek Keyboard Layout' },
  po: { url: 'https://kbdlayout.info/KBDPO', name: 'Portuguese Keyboard Layout' },
  us: { url: 'https://kbdlayout.info/KBDUS', name: 'United States Keyboard Layout' },
};

const copyrightHeader = `
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated by ${path.basename(__filename).split(path.sep).join(path.posix.sep)}, do not edit manually.
`;

const typeDefs = `
export type KeyDefinition = {
  key: string;
  keyCode: number;
  keyCodeWithoutLocation?: number;
  shiftKey?: string;
  shiftKeyCode?: number;
  text?: string;
  location?: number;
};

export type KeyboardLayout = { [s: string]: KeyDefinition; };

export type KeyboardLayoutMap = Record<string, KeyboardLayout>;
`;

/**
 * @type { Object.<string,KeyDefinition | string> }
 *
 * strings correspond to locators on corresponding kbdlayout.info page
 */
const keyboardLayoutGenerator = {
  // Functions row
  'Escape': { 'keyCode': 27, 'key': 'Escape' },
  'F1': { 'keyCode': 112, 'key': 'F1' },
  'F2': { 'keyCode': 113, 'key': 'F2' },
  'F3': { 'keyCode': 114, 'key': 'F3' },
  'F4': { 'keyCode': 115, 'key': 'F4' },
  'F5': { 'keyCode': 116, 'key': 'F5' },
  'F6': { 'keyCode': 117, 'key': 'F6' },
  'F7': { 'keyCode': 118, 'key': 'F7' },
  'F8': { 'keyCode': 119, 'key': 'F8' },
  'F9': { 'keyCode': 120, 'key': 'F9' },
  'F10': { 'keyCode': 121, 'key': 'F10' },
  'F11': { 'keyCode': 122, 'key': 'F11' },
  'F12': { 'keyCode': 123, 'key': 'F12' },

  // Numbers row
  'Backquote': '.kr2 > div:nth-child(1) > .kc',
  'Digit1': '.kr2 > div:nth-child(2) > .kc',
  'Digit2': '.kr2 > div:nth-child(3) > .kc',
  'Digit3': '.kr2 > div:nth-child(4) > .kc',
  'Digit4': '.kr2 > div:nth-child(5) > .kc',
  'Digit5': '.kr2 > div:nth-child(6) > .kc',
  'Digit6': '.kr2 > div:nth-child(7) > .kc',
  'Digit7': '.kr2 > div:nth-child(8) > .kc',
  'Digit8': '.kr2 > div:nth-child(9) > .kc',
  'Digit9': '.kr2 > div:nth-child(10) > .kc',
  'Digit0': '.kr2 > div:nth-child(11) > .kc',
  'Minus': '.kr2 > div:nth-child(12) > .kc',
  'Equal': '.kr2 > div:nth-child(13) > .kc',
  'Backspace': '.kr2 > div:nth-child(14) > .kc',

  // First row
  'Tab': '.kr3 > div:nth-child(1) > .kc',
  'KeyQ': '.kr3 > div:nth-child(2) > .kc',
  'KeyW': '.kr3 > div:nth-child(3) > .kc',
  'KeyE': '.kr3 > div:nth-child(4) > .kc',
  'KeyR': '.kr3 > div:nth-child(5) > .kc',
  'KeyT': '.kr3 > div:nth-child(6) > .kc',
  'KeyY': '.kr3 > div:nth-child(7) > .kc',
  'KeyU': '.kr3 > div:nth-child(8) > .kc',
  'KeyI': '.kr3 > div:nth-child(9) > .kc',
  'KeyO': '.kr3 > div:nth-child(10) > .kc',
  'KeyP': '.kr3 > div:nth-child(11) > .kc',
  'BracketLeft': '.kr3 > div:nth-child(12) > .kc',
  'BracketRight': '.kr3 > div:nth-child(13) > .kc',
  'Enter': '.kr3 > div:nth-child(14) > .kc',

  // Second row
  'CapsLock': { 'keyCode': 20, 'key': 'CapsLock' },
  'KeyA': '.kr4 > div:nth-child(2) > .kc',
  'KeyS': '.kr4 > div:nth-child(3) > .kc',
  'KeyD': '.kr4 > div:nth-child(4) > .kc',
  'KeyF': '.kr4 > div:nth-child(5) > .kc',
  'KeyG': '.kr4 > div:nth-child(6) > .kc',
  'KeyH': '.kr4 > div:nth-child(7) > .kc',
  'KeyJ': '.kr4 > div:nth-child(8) > .kc',
  'KeyK': '.kr4 > div:nth-child(9) > .kc',
  'KeyL': '.kr4 > div:nth-child(10) > .kc',
  'Semicolon': '.kr4 > div:nth-child(11) > .kc',
  'Quote': '.kr4 > div:nth-child(12) > .kc',
  'Backslash': '.kr4 > div:nth-child(13) > .kc',

  // Third row
  'ShiftLeft': { 'keyCode': 160, 'keyCodeWithoutLocation': 16, 'key': 'Shift', 'location': 1 },
  'IntlBackslash': '.kr5 > div:nth-child(2) > .kc',
  'KeyZ': '.kr5 > div:nth-child(3) > .kc',
  'KeyX': '.kr5 > div:nth-child(4) > .kc',
  'KeyC': '.kr5 > div:nth-child(5) > .kc',
  'KeyV': '.kr5 > div:nth-child(6) > .kc',
  'KeyB': '.kr5 > div:nth-child(7) > .kc',
  'KeyN': '.kr5 > div:nth-child(8) > .kc',
  'KeyM': '.kr5 > div:nth-child(9) > .kc',
  'Comma': '.kr5 > div:nth-child(10) > .kc',
  'Period': '.kr5 > div:nth-child(11) > .kc',
  'Slash': '.kr5 > div:nth-child(12) > .kc',
  'ShiftRight': { 'keyCode': 161, 'keyCodeWithoutLocation': 16, 'key': 'Shift', 'location': 2 },

  // Last row
  'ControlLeft': { 'keyCode': 162, 'keyCodeWithoutLocation': 17, 'key': 'Control', 'location': 1 },
  'MetaLeft': { 'keyCode': 91, 'key': 'Meta', 'location': 1 },
  'AltLeft': { 'keyCode': 164, 'keyCodeWithoutLocation': 18, 'key': 'Alt', 'location': 1 },
  'Space': '.kr6 > div:nth-child(4) > .kc',
  'AltRight': { 'keyCode': 165, 'keyCodeWithoutLocation': 18, 'key': 'Alt', 'location': 2 },
  'AltGraph': { 'keyCode': 225, 'key': 'AltGraph' },
  'MetaRight': { 'keyCode': 92, 'key': 'Meta', 'location': 2 },
  'ContextMenu': { 'keyCode': 93, 'key': 'ContextMenu' },
  'ControlRight': { 'keyCode': 163, 'keyCodeWithoutLocation': 17, 'key': 'Control', 'location': 2 },

  // Center block
  'PrintScreen': { 'keyCode': 44, 'key': 'PrintScreen' },
  'ScrollLock': { 'keyCode': 145, 'key': 'ScrollLock' },
  'Pause': { 'keyCode': 19, 'key': 'Pause' },

  'PageUp': { 'keyCode': 33, 'key': 'PageUp' },
  'PageDown': { 'keyCode': 34, 'key': 'PageDown' },
  'Insert': { 'keyCode': 45, 'key': 'Insert' },
  'Delete': { 'keyCode': 46, 'key': 'Delete' },
  'Home': { 'keyCode': 36, 'key': 'Home' },
  'End': { 'keyCode': 35, 'key': 'End' },

  'ArrowLeft': { 'keyCode': 37, 'key': 'ArrowLeft' },
  'ArrowUp': { 'keyCode': 38, 'key': 'ArrowUp' },
  'ArrowRight': { 'keyCode': 39, 'key': 'ArrowRight' },
  'ArrowDown': { 'keyCode': 40, 'key': 'ArrowDown' },

  // Numpad
  'NumLock': { 'keyCode': 144, 'key': 'NumLock' },
  'NumpadDivide': { 'keyCode': 111, 'key': '/', 'location': 3 },
  'NumpadMultiply': { 'keyCode': 106, 'key': '*', 'location': 3 },
  'NumpadSubtract': { 'keyCode': 109, 'key': '-', 'location': 3 },
  'Numpad7': { 'keyCode': 36, 'shiftKeyCode': 103, 'key': 'Home', 'shiftKey': '7', 'location': 3 },
  'Numpad8': { 'keyCode': 38, 'shiftKeyCode': 104, 'key': 'ArrowUp', 'shiftKey': '8', 'location': 3 },
  'Numpad9': { 'keyCode': 33, 'shiftKeyCode': 105, 'key': 'PageUp', 'shiftKey': '9', 'location': 3 },
  'Numpad4': { 'keyCode': 37, 'shiftKeyCode': 100, 'key': 'ArrowLeft', 'shiftKey': '4', 'location': 3 },
  'Numpad5': { 'keyCode': 12, 'shiftKeyCode': 101, 'key': 'Clear', 'shiftKey': '5', 'location': 3 },
  'Numpad6': { 'keyCode': 39, 'shiftKeyCode': 102, 'key': 'ArrowRight', 'shiftKey': '6', 'location': 3 },
  'NumpadAdd': { 'keyCode': 107, 'key': '+', 'location': 3 },
  'Numpad1': { 'keyCode': 35, 'shiftKeyCode': 97, 'key': 'End', 'shiftKey': '1', 'location': 3 },
  'Numpad2': { 'keyCode': 40, 'shiftKeyCode': 98, 'key': 'ArrowDown', 'shiftKey': '2', 'location': 3 },
  'Numpad3': { 'keyCode': 34, 'shiftKeyCode': 99, 'key': 'PageDown', 'shiftKey': '3', 'location': 3 },
  'Numpad0': { 'keyCode': 45, 'shiftKeyCode': 96, 'key': 'Insert', 'shiftKey': '0', 'location': 3 },
  'NumpadDecimal': { 'keyCode': 46, 'shiftKeyCode': 110, 'key': '\u0000', 'shiftKey': '.', 'location': 3 },
  'NumpadEnter': { 'keyCode': 13, 'key': 'Enter', 'text': '\r', 'location': 3 },
};

/**
 * @param { string } keyname
 * @param { Locator } keyLocator
 * @param { number } virtualKeyCode
 * @returns { Promise<KeyDefinition> }
 */
async function process(keyname, keyLocator, virtualKeyCode) {
  assert(await keyLocator.locator('[title]').count() === 1, `Locator ${keyLocator} doesn't have a unique title`);
  const title = await keyLocator.locator('[title]').getAttribute('title');
  assert(title);

  const [, key] = /^(.?) U\+[0-9A-F]{4}/.exec(title) ?? [];
  const [, shiftKey] = /SHIFT: (.) U\+[0-9A-F]{4}/.exec(title) ?? [];

  let location;

  return {
    keyCode: virtualKeyCode,
    shiftKey: shiftKey === key ? undefined : shiftKey,
    key: key || keyname,
    location,
    // for ENTER key
    text: virtualKeyCode === 13 ? '\n' : undefined,
  };
}

/**
 * @param { Page } page
 * @param { string } url
 * @returns { Promise<Object.<string, number>> }
 */
async function extractLocatorToVirtualKeys(page, url) {
  await page.goto(`${url}/virtualkeys`);

  /** @type { Object.<string, number> } */
  const mappings = {};

  /** @type { string[] } */
  // @ts-ignore
  const locators = Object.values(keyboardLayoutGenerator).filter(v => typeof v === 'string');
  for (const loc of locators) {
    const scancode = await page.locator(loc).locator('> .kls > .kl10').textContent();
    const vk = await page.locator(`.scGroup tr:has(td:nth-child(1):text-is("${scancode}")) > td:nth-child(2)`).first().textContent();
    assert(vk, `No virtual key code found for ${loc} (scancode ${scancode})`);
    mappings[loc] = parseInt(vk, 16);
  }

  return mappings;
}

/**
 * @param { Page } page
 * @param { string } url
 * @returns { Promise<Object.<string, KeyDefinition>> }
 */
async function generate(page, url) {
  const locatorToVirtualKeys = await extractLocatorToVirtualKeys(page, url);
  await page.goto(url);

  /** @type { Object.<string, KeyDefinition> } */
  const layout = {};

  for (const [keyname, def] of Object.entries(keyboardLayoutGenerator)) {
    if (typeof def === 'string') {
      layout[keyname] = await process(keyname, page.locator(def), locatorToVirtualKeys[def]);
    } else {
      layout[keyname] = def;
    }
  }
  return layout;
}

const keyboardsDir = path.resolve(__dirname, '../packages/playwright-core/src/server/keyboards');

(async () => {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  for (const [layout, { url, name }] of Object.entries(layoutUrls)) {
    // for now skip US, to ensure it is 100% compatible with previous version
    //if (layout === 'us') continue;
    console.log(`Generating keyboard layout for ${layout} (${name})`);
    const layoutData = await generate(page, url);
    fs.writeFileSync(path.resolve(keyboardsDir, 'layouts', `${layout}.json`), JSON.stringify(layoutData, undefined, 2), 'utf-8');
  }

  const index = [
    copyrightHeader,
    ...Object.keys(layoutUrls).map(k => `import ${k} from './layouts/${k}.json';`),
    typeDefs,
    `export const keyboardLayouts: KeyboardLayoutMap = {`,
    ...Object.keys(layoutUrls).map(k => `  ${k},`),
    `};`,
    ``,
    `export const keypadLocation = 3;`,
  ].join('\n');

  fs.writeFileSync(path.resolve(keyboardsDir, 'index.ts'), index, 'utf-8');

  browser.close();
})();
